/*
 * NetFlowMatchPanel.java
 *
 * Created on 23 November 2005, 21:57
 *
 * AsItHappens - real-time network monitor
 * Copyright (C) 2006  Mark Abrahams
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 */

package nz.co.abrahams.asithappens.netflow;

import nz.co.abrahams.asithappens.core.InvalidInputException;
import java.net.*;

/**
 * Panel containing NetFlow match criteria.
 *
 * @author  mark
 */
public class NetFlowMatchPanel extends javax.swing.JPanel {
    
    /** The underlying criteria to modify */
    private NetFlowMatchCriteria criteria;
    
    /** Creates a new NetFlowMatchPanel. */
    public NetFlowMatchPanel(NetFlowMatchCriteria criteria) {
        this.criteria = criteria;
        initComponents();
        loadCriteria();
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        srcAddressLabel = new javax.swing.JLabel();
        srcAddressField = new javax.swing.JTextField();
        addressLabel = new javax.swing.JLabel();
        srcAddressMaskField = new javax.swing.JTextField();
        dstAddressLabel = new javax.swing.JLabel();
        srcASField = new javax.swing.JTextField();
        srcMaskSlashLabel = new javax.swing.JLabel();
        srcPortLoField = new javax.swing.JTextField();
        srcPortHiField = new javax.swing.JTextField();
        asLabel = new javax.swing.JLabel();
        maskLabel = new javax.swing.JLabel();
        portRangeLabel = new javax.swing.JLabel();
        srcPortRangeDashLabel = new javax.swing.JLabel();
        dstASField = new javax.swing.JTextField();
        dstAddressField = new javax.swing.JTextField();
        dstMaskSlashLabel = new javax.swing.JLabel();
        dstAddressMaskField = new javax.swing.JTextField();
        dstPortLoField = new javax.swing.JTextField();
        dstPortRangeDashLabel = new javax.swing.JLabel();
        dstPortHiField = new javax.swing.JTextField();
        protocolLabel = new javax.swing.JLabel();
        protocolField = new javax.swing.JTextField();
        tosLabel = new javax.swing.JLabel();
        tosField = new javax.swing.JTextField();
        classMapLabel = new javax.swing.JLabel();
        classMapField = new javax.swing.JTextField();
        byteRangeLabel = new javax.swing.JLabel();
        minBytesField = new javax.swing.JTextField();
        byteRangeDashLabel = new javax.swing.JLabel();
        maxBytesField = new javax.swing.JTextField();
        packetRangeLabel = new javax.swing.JLabel();
        minPacketsField = new javax.swing.JTextField();
        packetsRangeDashLabel = new javax.swing.JLabel();
        maxPacketsField = new javax.swing.JTextField();
        nhAddressField = new javax.swing.JTextField();
        nhMaskSlashLabel = new javax.swing.JLabel();
        nhAddressMaskField = new javax.swing.JTextField();
        nhAddressLabel = new javax.swing.JLabel();
        samplerLabel = new javax.swing.JLabel();
        samplerField = new javax.swing.JTextField();

        setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        srcAddressLabel.setText("Source");
        add(srcAddressLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 70, -1, -1));
        add(srcAddressField, new org.netbeans.lib.awtextra.AbsoluteConstraints(90, 70, 110, -1));

        addressLabel.setText("Address");
        add(addressLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(120, 50, -1, -1));
        add(srcAddressMaskField, new org.netbeans.lib.awtextra.AbsoluteConstraints(210, 70, 30, -1));

        dstAddressLabel.setText("Destination");
        add(dstAddressLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 100, -1, -1));
        add(srcASField, new org.netbeans.lib.awtextra.AbsoluteConstraints(390, 70, 50, -1));

        srcMaskSlashLabel.setText("/");
        add(srcMaskSlashLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(200, 70, -1, -1));
        add(srcPortLoField, new org.netbeans.lib.awtextra.AbsoluteConstraints(260, 70, 50, -1));
        add(srcPortHiField, new org.netbeans.lib.awtextra.AbsoluteConstraints(320, 70, 50, -1));

        asLabel.setText("AS");
        add(asLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(400, 50, -1, -1));

        maskLabel.setText("Mask");
        add(maskLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(210, 50, -1, -1));

        portRangeLabel.setText("Port range");
        add(portRangeLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(280, 50, -1, -1));

        srcPortRangeDashLabel.setText("-");
        add(srcPortRangeDashLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(310, 70, -1, -1));
        add(dstASField, new org.netbeans.lib.awtextra.AbsoluteConstraints(390, 100, 50, -1));
        add(dstAddressField, new org.netbeans.lib.awtextra.AbsoluteConstraints(90, 100, 110, -1));

        dstMaskSlashLabel.setText("/");
        add(dstMaskSlashLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(200, 100, -1, -1));
        add(dstAddressMaskField, new org.netbeans.lib.awtextra.AbsoluteConstraints(210, 100, 30, -1));
        add(dstPortLoField, new org.netbeans.lib.awtextra.AbsoluteConstraints(260, 100, 50, -1));

        dstPortRangeDashLabel.setText("-");
        add(dstPortRangeDashLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(310, 100, -1, -1));
        add(dstPortHiField, new org.netbeans.lib.awtextra.AbsoluteConstraints(320, 100, 50, -1));

        protocolLabel.setText("Protocol");
        add(protocolLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(80, 10, -1, -1));
        add(protocolField, new org.netbeans.lib.awtextra.AbsoluteConstraints(140, 10, 50, -1));

        tosLabel.setText("TOS");
        add(tosLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(270, 10, -1, -1));
        add(tosField, new org.netbeans.lib.awtextra.AbsoluteConstraints(310, 10, 50, -1));

        classMapLabel.setText("Class Map");
        add(classMapLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 230, -1, -1));
        add(classMapField, new org.netbeans.lib.awtextra.AbsoluteConstraints(90, 230, 110, -1));

        byteRangeLabel.setText("Byte range");
        add(byteRangeLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 180, -1, -1));
        add(minBytesField, new org.netbeans.lib.awtextra.AbsoluteConstraints(90, 180, 50, -1));

        byteRangeDashLabel.setText("-");
        add(byteRangeDashLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(140, 180, -1, -1));
        add(maxBytesField, new org.netbeans.lib.awtextra.AbsoluteConstraints(150, 180, 50, -1));

        packetRangeLabel.setText("Packet range");
        add(packetRangeLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(240, 180, -1, -1));
        add(minPacketsField, new org.netbeans.lib.awtextra.AbsoluteConstraints(330, 180, 50, -1));

        packetsRangeDashLabel.setText("-");
        add(packetsRangeDashLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(380, 180, -1, -1));
        add(maxPacketsField, new org.netbeans.lib.awtextra.AbsoluteConstraints(390, 180, 50, -1));
        add(nhAddressField, new org.netbeans.lib.awtextra.AbsoluteConstraints(90, 130, 110, -1));

        nhMaskSlashLabel.setText("/");
        add(nhMaskSlashLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(200, 130, -1, -1));
        add(nhAddressMaskField, new org.netbeans.lib.awtextra.AbsoluteConstraints(210, 130, 30, -1));

        nhAddressLabel.setText("Next hop");
        add(nhAddressLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 130, -1, -1));

        samplerLabel.setText("Flow sampler");
        add(samplerLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(240, 230, -1, -1));
        add(samplerField, new org.netbeans.lib.awtextra.AbsoluteConstraints(330, 230, 110, -1));
    }// </editor-fold>//GEN-END:initComponents
    
    /** Populates GUI components from current match criteria. */
    public void loadCriteria() {
        NetFlowMatchCriteria defaults;
        
        defaults = new NetFlowMatchCriteria();
        if ( criteria.srcAddress != defaults.srcAddress )
            srcAddressField.setText(criteria.getSrcAddress());
        if ( criteria.srcAddressMask != defaults.srcAddressMask )
            srcAddressMaskField.setText(Integer.toString(criteria.srcAddressMask));
        if ( criteria.dstAddress != defaults.dstAddress )
            dstAddressField.setText(criteria.getDstAddress());
        if ( criteria.dstAddressMask != defaults.dstAddressMask )
            dstAddressMaskField.setText(Integer.toString(criteria.dstAddressMask));
        if ( criteria.nhAddress != defaults.nhAddress )
            nhAddressField.setText(criteria.getNhAddress());
        if ( criteria.nhAddressMask != defaults.nhAddressMask )
            nhAddressMaskField.setText(Integer.toString(criteria.nhAddressMask));
        if ( criteria.srcPortLo != defaults.srcPortLo )
            srcPortLoField.setText(Integer.toString(criteria.srcPortLo));
        if ( criteria.srcPortHi != defaults.srcPortHi )
            srcPortHiField.setText(Integer.toString(criteria.srcPortHi));
        if ( criteria.dstPortLo != defaults.dstPortLo )
            dstPortLoField.setText(Integer.toString(criteria.dstPortLo));
        if ( criteria.dstPortHi != defaults.dstPortHi )
            dstPortHiField.setText(Integer.toString(criteria.dstPortHi));
        if ( criteria.srcAS != defaults.srcAS )
            srcASField.setText(Integer.toString(criteria.srcAS));
        if ( criteria.dstAS != defaults.dstAS )
            dstASField.setText(Integer.toString(criteria.dstAS));
        if ( criteria.tosByte != defaults.tosByte )
            tosField.setText(Integer.toString(criteria.tosByte));
        if ( criteria.protocol != defaults.protocol )
            protocolField.setText(Integer.toString(criteria.protocol));
        if ( criteria.sampler != defaults.sampler )
            samplerField.setText(criteria.sampler);
        if ( criteria.classMap != defaults.classMap )
            classMapField.setText(criteria.classMap);
        if ( criteria.minPackets != defaults.minPackets )
            minPacketsField.setText(Integer.toString(criteria.minPackets));
        if ( criteria.maxPackets != defaults.maxPackets )
            maxPacketsField.setText(Integer.toString(criteria.maxPackets));
        if ( criteria.minBytes != defaults.minBytes )
            minBytesField.setText(Integer.toString(criteria.minBytes));
        if ( criteria.maxBytes != defaults.maxBytes )
            maxBytesField.setText(Integer.toString(criteria.maxBytes));
    }
    
    /** Stores NetFlow match criteria from GUI components. */
    public boolean saveCriteria() throws InvalidInputException {
        NetFlowMatchCriteria gather;
        
        gather = new NetFlowMatchCriteria();
        if ( ! srcAddressField.getText().equals("") ) {
            gather.srcAddressType = 1;
            gather.setSrcAddress(srcAddressField.getText());
        }
        if ( ! srcAddressMaskField.getText().equals("") )
            gather.srcAddressMask = Integer.parseInt(srcAddressMaskField.getText());
        if ( ! dstAddressField.getText().equals("") ) {
            gather.dstAddressType = 1;
            gather.setDstAddress(dstAddressField.getText());
        }
        if ( ! dstAddressMaskField.getText().equals("") )
            gather.dstAddressMask = Integer.parseInt(dstAddressMaskField.getText());
        if ( ! nhAddressField.getText().equals("") ) {
            gather.nhAddressType = 1;
            gather.setNhAddress(nhAddressField.getText());
        }
        if ( ! nhAddressMaskField.getText().equals("") )
            gather.nhAddressMask = Integer.parseInt(nhAddressMaskField.getText());
        if ( ! srcPortLoField.getText().equals("") )
            gather.srcPortLo = Integer.parseInt(srcPortLoField.getText());
        if ( ! srcPortHiField.getText().equals("") )
            gather.srcPortHi = Integer.parseInt(srcPortHiField.getText());
        if ( ! dstPortLoField.getText().equals("") )
            gather.dstPortLo = Integer.parseInt(dstPortLoField.getText());
        if ( ! dstPortHiField.getText().equals("") )
            gather.dstPortHi = Integer.parseInt(dstPortHiField.getText());
        if ( ! srcASField.getText().equals("") )
            gather.srcAS = Integer.parseInt(srcASField.getText());
        if ( ! dstASField.getText().equals("") )
            gather.dstAS = Integer.parseInt(dstASField.getText());
        if ( ! tosField.getText().equals("") )
            gather.tosByte = Integer.parseInt(tosField.getText());
        if ( ! protocolField.getText().equals("") )
            gather.protocol = Integer.parseInt(protocolField.getText());
        if ( ! samplerField.getText().equals("") )
            gather.sampler = samplerField.getText();
        if ( ! classMapField.getText().equals("") )
            gather.classMap = classMapField.getText();
        if ( ! minPacketsField.getText().equals("") )
            gather.minPackets = Integer.parseInt(minPacketsField.getText());
        if ( ! maxPacketsField.getText().equals("") )
            gather.maxPackets = Integer.parseInt(maxPacketsField.getText());
        if ( ! minBytesField.getText().equals("") )
            gather.minBytes = Integer.parseInt(minBytesField.getText());
        if ( ! maxBytesField.getText().equals("") )
            gather.maxBytes = Integer.parseInt(maxBytesField.getText());
        criteria.copyCriteria(gather);
        return true;
    }
    
    /** Clears all GUI components. */
    public void clearAll() {
        protocolField.setText("");
        tosField.setText("");
        srcAddressField.setText("");
        srcAddressMaskField.setText("");
        srcPortLoField.setText("");
        srcPortHiField.setText("");
        srcASField.setText("");
        dstAddressField.setText("");
        dstAddressMaskField.setText("");
        dstPortLoField.setText("");
        dstPortHiField.setText("");
        dstASField.setText("");
        nhAddressField.setText("");
        nhAddressMaskField.setText("");
        minBytesField.setText("");
        maxBytesField.setText("");
        minPacketsField.setText("");
        maxPacketsField.setText("");
        classMapField.setText("");
        samplerField.setText("");
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel addressLabel;
    private javax.swing.JLabel asLabel;
    private javax.swing.JLabel byteRangeDashLabel;
    private javax.swing.JLabel byteRangeLabel;
    private javax.swing.JTextField classMapField;
    private javax.swing.JLabel classMapLabel;
    private javax.swing.JTextField dstASField;
    private javax.swing.JTextField dstAddressField;
    private javax.swing.JLabel dstAddressLabel;
    private javax.swing.JTextField dstAddressMaskField;
    private javax.swing.JLabel dstMaskSlashLabel;
    private javax.swing.JTextField dstPortHiField;
    private javax.swing.JTextField dstPortLoField;
    private javax.swing.JLabel dstPortRangeDashLabel;
    private javax.swing.JLabel maskLabel;
    private javax.swing.JTextField maxBytesField;
    private javax.swing.JTextField maxPacketsField;
    private javax.swing.JTextField minBytesField;
    private javax.swing.JTextField minPacketsField;
    private javax.swing.JTextField nhAddressField;
    private javax.swing.JLabel nhAddressLabel;
    private javax.swing.JTextField nhAddressMaskField;
    private javax.swing.JLabel nhMaskSlashLabel;
    private javax.swing.JLabel packetRangeLabel;
    private javax.swing.JLabel packetsRangeDashLabel;
    private javax.swing.JLabel portRangeLabel;
    private javax.swing.JTextField protocolField;
    private javax.swing.JLabel protocolLabel;
    private javax.swing.JTextField samplerField;
    private javax.swing.JLabel samplerLabel;
    private javax.swing.JTextField srcASField;
    private javax.swing.JTextField srcAddressField;
    private javax.swing.JLabel srcAddressLabel;
    private javax.swing.JTextField srcAddressMaskField;
    private javax.swing.JLabel srcMaskSlashLabel;
    private javax.swing.JTextField srcPortHiField;
    private javax.swing.JTextField srcPortLoField;
    private javax.swing.JLabel srcPortRangeDashLabel;
    private javax.swing.JTextField tosField;
    private javax.swing.JLabel tosLabel;
    // End of variables declaration//GEN-END:variables
    
}
