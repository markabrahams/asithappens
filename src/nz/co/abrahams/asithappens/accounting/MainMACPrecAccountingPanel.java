/*
 * MainMACPrecAccountingPanel.java
 *
 * Created on 14 August 2012, 21:50
 *
 * AsItHappens - real-time network monitor
 * Copyright (C) 2006  Mark Abrahams
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 */
package nz.co.abrahams.asithappens.accounting;

import javax.swing.JComboBox;
import javax.swing.ListSelectionModel;
import nz.co.abrahams.asithappens.collectors.CollectorDefinition;
import nz.co.abrahams.asithappens.snmputil.SNMPAccessType;
import nz.co.abrahams.asithappens.storage.Device;
import nz.co.abrahams.asithappens.storage.Direction;
import nz.co.abrahams.asithappens.uiutil.GraphFactory;
import nz.co.abrahams.asithappens.uiutil.PortsSelectorPanel;

/**
 * The graphical pane for creating Cisco accounting graphs.
 *
 * @author mark
 */
public class MainMACPrecAccountingPanel extends javax.swing.JPanel {

    /**
     * Ports selector interface
     */
    private PortsSelectorPanel portsSelectorPanel;

    /**
     * Creates new MainMACPrecAccountingPanel
     */
    public MainMACPrecAccountingPanel() {
        initComponents();
        initComponentsFinish();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        pollLabel = new javax.swing.JLabel();
        pollField = new javax.swing.JTextField();
        pollUnitsLabel = new javax.swing.JLabel();
        storeDataCheckBox = new javax.swing.JCheckBox();
        macAccountingButton = new javax.swing.JButton();
        precedenceAccountingButton = new javax.swing.JButton();
        directionLabel = new javax.swing.JLabel();
        directionCombo = new JComboBox(Direction.getLabels());

        setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        pollLabel.setText("Poll Interval");
        add(pollLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(440, 10, 90, 20));

        pollField.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        pollField.setText("2000");
        add(pollField, new org.netbeans.lib.awtextra.AbsoluteConstraints(530, 10, 70, -1));

        pollUnitsLabel.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        pollUnitsLabel.setText("ms");
        add(pollUnitsLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(610, 10, 20, 20));

        storeDataCheckBox.setText("Store collected data");
        add(storeDataCheckBox, new org.netbeans.lib.awtextra.AbsoluteConstraints(440, 330, 180, -1));

        macAccountingButton.setText("MAC Graph");
        macAccountingButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                macAccountingButtonActionPerformed(evt);
            }
        });
        add(macAccountingButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 330, 190, 30));

        precedenceAccountingButton.setText("IP Prec Graph");
        precedenceAccountingButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                precedenceAccountingButtonActionPerformed(evt);
            }
        });
        add(precedenceAccountingButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(220, 330, 200, 30));

        directionLabel.setText("Direction");
        add(directionLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(440, 120, 90, 24));
        add(directionCombo, new org.netbeans.lib.awtextra.AbsoluteConstraints(550, 120, 80, -1));
    }// </editor-fold>//GEN-END:initComponents

    private void initComponentsFinish() {
        portsSelectorPanel = new PortsSelectorPanel(SNMPAccessType.ReadOnly, ListSelectionModel.SINGLE_SELECTION);
        add(portsSelectorPanel, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, -1, -1));
    }

    /**
     * Creates a new IP Precedence Accounting graph.
     */
    private void precedenceAccountingButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_precedenceAccountingButtonActionPerformed
        Device device;
        String ifDescr;
        Direction direction;
        IPPrecAccountingCollectorDefinition definition;

        if (!portsSelectorPanel.isPortSelected()) {
            return;
        }

        device = portsSelectorPanel.getEnumeratedDevice();
        ifDescr = portsSelectorPanel.getIfDescription();
        direction = Direction.getDirectionFromListPosition(directionCombo.getSelectedIndex());

        definition = new IPPrecAccountingCollectorDefinition(null, device,
                Long.parseLong(pollField.getText()), storeDataCheckBox.isSelected(),
                ifDescr, direction);
        GraphFactory.create(definition);
    }//GEN-LAST:event_precedenceAccountingButtonActionPerformed

    /**
     * Creates a new MAC Address Accounting graph.
     */
    private void macAccountingButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_macAccountingButtonActionPerformed
        Device device;
        String ifDescr;
        Direction direction;
        MACAccountingCollectorDefinition definition;

        if (!portsSelectorPanel.isPortSelected()) {
            return;
        }

        device = portsSelectorPanel.getEnumeratedDevice();
        ifDescr = portsSelectorPanel.getIfDescription();
        direction = Direction.getDirectionFromListPosition(directionCombo.getSelectedIndex());

        definition = new MACAccountingCollectorDefinition(null, device,
                Integer.parseInt(pollField.getText()), storeDataCheckBox.isSelected(),
                ifDescr, direction);
        GraphFactory.create(definition);
    }//GEN-LAST:event_macAccountingButtonActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox directionCombo;
    private javax.swing.JLabel directionLabel;
    private javax.swing.JButton macAccountingButton;
    private javax.swing.JTextField pollField;
    private javax.swing.JLabel pollLabel;
    private javax.swing.JLabel pollUnitsLabel;
    private javax.swing.JButton precedenceAccountingButton;
    private javax.swing.JCheckBox storeDataCheckBox;
    // End of variables declaration//GEN-END:variables
}
