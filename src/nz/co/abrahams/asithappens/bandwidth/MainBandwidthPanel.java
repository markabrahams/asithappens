/*
 * MainBandwidthPanel.java
 *
 * Created on 4 May 2005, 21:31
 *
 * AsItHappens - real-time network monitor
 * Copyright (C) 2006  Mark Abrahams
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 */

package nz.co.abrahams.asithappens.bandwidth;

import javax.swing.ListSelectionModel;
import nz.co.abrahams.asithappens.snmputil.SNMPAccessType;
import nz.co.abrahams.asithappens.storage.Device;
import nz.co.abrahams.asithappens.uiutil.GraphFactory;
import nz.co.abrahams.asithappens.uiutil.PortsSelectorPanel;

/**
 * The graphical pane for creating bandwidth graphs.
 *
 * @author  mark
 */
public class MainBandwidthPanel extends javax.swing.JPanel {
    
    /** Ports selector interface */
    private PortsSelectorPanel portsSelectorPanel;

    /** Creates new form MainBandwidthPanel */
    public MainBandwidthPanel() {
        initComponents();
        initComponentsFinish();
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        pollLabel = new javax.swing.JLabel();
        pollField = new javax.swing.JTextField();
        pollUnitsLabel = new javax.swing.JLabel();
        prefer64BitCheckBox = new javax.swing.JCheckBox();
        storeDataCheckBox = new javax.swing.JCheckBox();
        bandwidthButton = new javax.swing.JButton();

        setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        pollLabel.setText("Poll Interval");
        add(pollLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(440, 10, 90, 20));

        pollField.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        pollField.setText("2000");
        add(pollField, new org.netbeans.lib.awtextra.AbsoluteConstraints(530, 10, 70, -1));

        pollUnitsLabel.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        pollUnitsLabel.setText("ms");
        add(pollUnitsLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(610, 10, 20, 20));

        prefer64BitCheckBox.setText("Prefer 64-bit counters");
        add(prefer64BitCheckBox, new org.netbeans.lib.awtextra.AbsoluteConstraints(440, 40, -1, -1));

        storeDataCheckBox.setText("Store collected data");
        add(storeDataCheckBox, new org.netbeans.lib.awtextra.AbsoluteConstraints(440, 290, 180, -1));

        bandwidthButton.setText("Bandwidth Graph");
        bandwidthButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bandwidthButtonActionPerformed(evt);
            }
        });
        add(bandwidthButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 330, 620, 30));
    }// </editor-fold>//GEN-END:initComponents
    
    private void initComponentsFinish() {
        portsSelectorPanel = new PortsSelectorPanel(SNMPAccessType.ReadOnly, ListSelectionModel.MULTIPLE_INTERVAL_SELECTION);
        add(portsSelectorPanel, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, -1, -1));
    }
    
    /** Creates a new bandwidth graph. */
    private void bandwidthButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bandwidthButtonActionPerformed
        Device device;
        String[] ifDescriptions;
        BandwidthCollectorDefinition definition;
        
        if (!portsSelectorPanel.isPortSelected())
            return;
        
        device = portsSelectorPanel.getModel().getDevice();
        ifDescriptions = portsSelectorPanel.getIfDescriptions();

        definition = new BandwidthCollectorDefinition(null, device,
                Integer.parseInt(pollField.getText()), storeDataCheckBox.isSelected(),
                ifDescriptions, prefer64BitCheckBox.isSelected());
        GraphFactory.create(definition);
    }//GEN-LAST:event_bandwidthButtonActionPerformed
    
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton bandwidthButton;
    private javax.swing.JTextField pollField;
    private javax.swing.JLabel pollLabel;
    private javax.swing.JLabel pollUnitsLabel;
    private javax.swing.JCheckBox prefer64BitCheckBox;
    private javax.swing.JCheckBox storeDataCheckBox;
    // End of variables declaration//GEN-END:variables
    
}
