/*
 * PortsSelectorPanel.java
 *
 * Created on 28 May 2008, 21:37
 */

package nz.co.abrahams.asithappens.uiutil;

import nz.co.abrahams.asithappens.snmputil.SNMPException;
import nz.co.abrahams.asithappens.core.DBException;
import nz.co.abrahams.asithappens.core.Configuration;
import javax.swing.*;
import java.awt.Component;
import java.net.UnknownHostException;

/**
 *
 * @author  mark
 */
public class PortsSelectorPanel extends javax.swing.JPanel {
    
    public static final int IFALIAS_PREFERRED_WIDTH = 200;

    private DeviceSelectorPanel deviceSelectorPanel;

    protected PortsSelectorModel model;
    
    protected int selectionMode;
    
    /** Creates new form PortsSelectorPanel */
    public PortsSelectorPanel(boolean retrieveRWCommunity, int selectionMode) {
        model = new PortsSelectorModel(retrieveRWCommunity);
        this.selectionMode = selectionMode;
        initComponents();
        initComponentsFinish();
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        portsPane = new javax.swing.JScrollPane();
        portsButton = new javax.swing.JButton();
        portsTitleLabel = new javax.swing.JLabel();
        communityField = new javax.swing.JTextField();
        deviceField = new javax.swing.JTextField();

        setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());
        add(portsPane, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 110, 410, 200));

        portsButton.setText("Enumerate Ports");
        portsButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                portsButtonActionPerformed(evt);
            }
        });
        add(portsButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 40, 410, 30));

        portsTitleLabel.setText("Port list");
        add(portsTitleLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 90, 180, -1));

        communityField.setText("public");
        add(communityField, new org.netbeans.lib.awtextra.AbsoluteConstraints(360, 10, 60, -1));

        deviceField.setText("localhost");
        deviceField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deviceFieldActionPerformed(evt);
            }
        });
        deviceField.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                deviceFieldFocusLost(evt);
            }
        });
        add(deviceField, new org.netbeans.lib.awtextra.AbsoluteConstraints(280, 10, 70, -1));
    }// </editor-fold>//GEN-END:initComponents
    
    private void deviceFieldFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_deviceFieldFocusLost
        retrieveCommunity();
    }//GEN-LAST:event_deviceFieldFocusLost
    
    private void deviceFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deviceFieldActionPerformed
        retrieveCommunity();
    }//GEN-LAST:event_deviceFieldActionPerformed
    
    private void portsButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_portsButtonActionPerformed
        JList portsList;
        JTable portsTable;
        
        try {
            model.setDevice(deviceField.getText(), communityField.getText());
            model.enumeratePorts();
            portsTitleLabel.setText("Port list for " + model.getDevice().getName());
            
            if ( Configuration.getPropertyInt("device.ports.ifalias") != 1 ) {
                portsList = new JList(model.getSNMP().getPortsDescr());
                portsList.setSelectionMode(selectionMode);
                portsPane.setViewportView((Component)portsList);
            } else {
                portsTable = new JTable(new PortsSelectorTableModel(model.getTableData(), model.getTableHeadings()));
                portsTable.setSelectionMode(selectionMode);
                portsTable.setShowHorizontalLines(false);
                portsTable.setFillsViewportHeight(true);
                portsTable.getColumnModel().getColumn(1).setPreferredWidth(IFALIAS_PREFERRED_WIDTH);
                portsPane.setViewportView((Component)portsTable);
            }
            
        } catch (UnknownHostException e) {
            ErrorHandler.modalError(this, "Ensure that device \"" + deviceField.getText() + "\" exists",
                    "Cannot connect to device " + deviceField.getText());
        } catch (SNMPException e) {
            ErrorHandler.modalError(this, "Ensure that device name and community string are correct",
                    "Cannot connect to device " + deviceField.getText());
        } catch (DBException e) {
            ErrorHandler.modalError(null, "Please ensure that database is running and accessible",
                    "Error opening database connection", e);
        }
    }//GEN-LAST:event_portsButtonActionPerformed

    public void initComponentsFinish() {
        deviceSelectorPanel = new DeviceSelectorPanel();
        add(deviceSelectorPanel, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 10, 300, -1));
    }

    public PortsSelectorModel getModel() {
        return model;
    }
    
    public void retrieveCommunity() {
        String newCommunity;
        
        try {
            newCommunity = model.retrieveCommunity(deviceField.getText());
            if ( newCommunity != null )
                communityField.setText(newCommunity);
        } catch (DBException e) {
            ErrorHandler.modalError(null, "Please ensure that database is running and accessible",
                    "Error opening database connection", e);
        }
        
    }
    
    public int rowSelected() {
        if ( portsPane.getViewport().getView() instanceof JList )
            return ((JList)(portsPane.getViewport().getView())).getSelectedIndex();
        else
            return ((JTable)(portsPane.getViewport().getView())).getSelectedRow();
    }
    
    public int[] rowsSelected() {
        if ( portsPane.getViewport().getView() instanceof JList )
            return ((JList)(portsPane.getViewport().getView())).getSelectedIndices();
        else
            return ((JTable)(portsPane.getViewport().getView())).getSelectedRows();
    }
    
    public int getIfIndex() {
        return model.getSNMP().getPortsIndex()[rowSelected()];
    }
    
    public int[] getIfIndices() {
        int[] listSelections;
        int[] ifIndices;
        
        listSelections = rowsSelected();
        ifIndices = new int[listSelections.length];
        for ( int i = 0 ; i < listSelections.length ; i++) {
            ifIndices[i] = model.getSNMP().getPortsIndex()[listSelections[i]];
        }
        return ifIndices;
    }
    
    public String getIfDescription() {
        return model.getSNMP().getPortsDescr()[rowSelected()];
    }
    
    public String[] getIfDescriptions() {
        int[] listSelections;
        String[] ifDescriptions;
        
        listSelections = rowsSelected();
        ifDescriptions = new String[listSelections.length];
        for ( int i = 0 ; i < listSelections.length ; i++) {
            ifDescriptions[i] = model.getSNMP().getPortsDescr()[listSelections[i]];
        }
        return ifDescriptions;
    }
    
    public String getPortsString() {
        int[] listSelections;
        String portString;
        
        listSelections = rowsSelected();
        portString = new String();
        for ( int i = 0 ; i < listSelections.length ; i++) {
            portString = portString + model.getSNMP().getPortsDescr()[listSelections[i]];
            if ( i < listSelections.length - 1 )
                portString = portString + ",";
        }
        return portString;
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField communityField;
    private javax.swing.JTextField deviceField;
    private javax.swing.JButton portsButton;
    private javax.swing.JScrollPane portsPane;
    private javax.swing.JLabel portsTitleLabel;
    // End of variables declaration//GEN-END:variables
    
}
