/*
 * PortsSelectorPanel.java
 *
 * Created on 28 May 2008, 21:37
 */

package nz.co.abrahams.asithappens.uiutil;

import java.awt.Component;
import java.net.UnknownHostException;
import javax.swing.JList;
import javax.swing.JTable;
import nz.co.abrahams.asithappens.core.Configuration;
import nz.co.abrahams.asithappens.core.DBException;
import nz.co.abrahams.asithappens.snmputil.SNMPAccessType;
import nz.co.abrahams.asithappens.snmputil.SNMPException;
import nz.co.abrahams.asithappens.storage.Device;

/**
 *
 * @author  mark
 */
public class PortsSelectorPanel extends javax.swing.JPanel {
    
    public static final int IFALIAS_PREFERRED_WIDTH = 200;

    private DeviceSelectorPanel deviceSelectorPanel;

    protected PortsSelectorModel model;
    
    protected int selectionMode;
    
    protected SNMPAccessType snmpAccessType;
    
    /** Creates new form PortsSelectorPanel */
    public PortsSelectorPanel(SNMPAccessType snmpAccessType, int selectionMode) {
        this.snmpAccessType = snmpAccessType;
        this.selectionMode = selectionMode;
        model = new PortsSelectorModel(snmpAccessType);
        initComponents();
        initComponentsFinish();
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        portsPane = new javax.swing.JScrollPane();
        portsButton = new javax.swing.JButton();
        portsTitleLabel = new javax.swing.JLabel();

        setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());
        add(portsPane, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 120, 410, 200));

        portsButton.setText("Enumerate Ports");
        portsButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                portsButtonActionPerformed(evt);
            }
        });
        add(portsButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 50, 410, 30));

        portsTitleLabel.setText("Port list");
        add(portsTitleLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 100, 180, -1));
    }// </editor-fold>//GEN-END:initComponents
            
    private void portsButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_portsButtonActionPerformed
        Device device;
        JList portsList;
        JTable portsTable;
        DeviceSelectorModel deviceSelector;
        
        device = deviceSelectorPanel.loadDevice();
        if (device == null)
            return;
        
        deviceSelector = deviceSelectorPanel.getModel();
        try {
            model.setDevice(device);
            model.enumeratePorts();
            portsTitleLabel.setText("Port list for " + model.getDevice().getName());
            
            if ( Configuration.getPropertyInt("device.ports.ifalias") != 1 ) {
                portsList = new JList(model.getSNMP().getPortsDescr());
                portsList.setSelectionMode(selectionMode);
                portsPane.setViewportView((Component)portsList);
            } else {
                portsTable = new JTable(new PortsSelectorTableModel(model.getTableData(), model.getTableHeadings()));
                portsTable.setSelectionMode(selectionMode);
                portsTable.setShowHorizontalLines(false);
                portsTable.setFillsViewportHeight(true);
                portsTable.getColumnModel().getColumn(1).setPreferredWidth(IFALIAS_PREFERRED_WIDTH);
                portsPane.setViewportView((Component)portsTable);
            }
            
        } catch (UnknownHostException e) {
            ErrorHandler.modalError(this, "Please ensure that device name \"" + deviceSelector.getName() + "\" is valid",
                    "Unknown host " + deviceSelector.getName());
        } catch (SNMPException e) {
            ErrorHandler.modalError(this, "Please ensure that device name and SNMP authentication credentials are correct",
                    "Cannot connect to device " + deviceSelector.getName());
        } catch (DBException e) {
            ErrorHandler.modalError(null, "Please ensure that database is running and accessible",
                    "Error opening da   tabase connection", e);
        }
    }//GEN-LAST:event_portsButtonActionPerformed

    private void initComponentsFinish() {
        deviceSelectorPanel = new DeviceSelectorPanel(snmpAccessType);
        add(deviceSelectorPanel, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 10, 410, -1));
    }
    
    public boolean isPortSelected() {
        if ( ! getModel().hasEnumerated() ) {
            ErrorHandler.modalError(this, "Please enumerate ports on a device and select a port",
                    "No port selected");
            return false;
        } else if ( rowsSelected().length == 0 ) {
            ErrorHandler.modalError(this, "Please select a port", "No port selected");
            return false;
        }
        return true;
    }

    public PortsSelectorModel getModel() {
        return model;
    }
    
    public Device getEnumeratedDevice() {
        return model.getDevice();
    }
    
    public DeviceSelectorModel getDeviceModel() {
        return deviceSelectorPanel.getModel();
    }    
    
    public int rowSelected() {
        if ( portsPane.getViewport().getView() instanceof JList )
            return ((JList)(portsPane.getViewport().getView())).getSelectedIndex();
        else
            return ((JTable)(portsPane.getViewport().getView())).getSelectedRow();
    }
    
    public int[] rowsSelected() {
        if ( portsPane.getViewport().getView() instanceof JList )
            return ((JList)(portsPane.getViewport().getView())).getSelectedIndices();
        else
            return ((JTable)(portsPane.getViewport().getView())).getSelectedRows();
    }
    
    public int getIfIndex() {
        return model.getSNMP().getPortsIndex()[rowSelected()];
    }
    
    public int[] getIfIndices() {
        int[] listSelections;
        int[] ifIndices;
        
        listSelections = rowsSelected();
        ifIndices = new int[listSelections.length];
        for ( int i = 0 ; i < listSelections.length ; i++) {
            ifIndices[i] = model.getSNMP().getPortsIndex()[listSelections[i]];
        }
        return ifIndices;
    }
    
    public String getIfDescription() {
        return model.getSNMP().getPortsDescr()[rowSelected()];
    }
    
    public String[] getIfDescriptions() {
        int[] listSelections;
        String[] ifDescriptions;
        
        listSelections = rowsSelected();
        ifDescriptions = new String[listSelections.length];
        for ( int i = 0 ; i < listSelections.length ; i++) {
            ifDescriptions[i] = model.getSNMP().getPortsDescr()[listSelections[i]];
        }
        return ifDescriptions;
    }
    
    public String getPortsString() {
        int[] listSelections;
        String portString;
        
        listSelections = rowsSelected();
        portString = new String();
        for ( int i = 0 ; i < listSelections.length ; i++) {
            portString = portString + model.getSNMP().getPortsDescr()[listSelections[i]];
            if ( i < listSelections.length - 1 )
                portString = portString + ",";
        }
        return portString;
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton portsButton;
    private javax.swing.JScrollPane portsPane;
    private javax.swing.JLabel portsTitleLabel;
    // End of variables declaration//GEN-END:variables
    
}
